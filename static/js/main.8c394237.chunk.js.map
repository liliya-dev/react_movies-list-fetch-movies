{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","Api.ts","components/FindMovie/FindMovie.tsx","components/Interfaces/Constants.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","imdbUrl","imgUrl","title","description","className","src","alt","href","MoviesList","movies","map","key","imdbId","fetchData","url","a","fetch","response","data","json","FindMovie","addMovie","useState","isFetched","setIsFetched","preview","setPreview","isDisabled","setDisabled","isError","setError","setTitle","loadData","dataFromServer","Response","undefined","newMovie","Title","Plot","Poster","imdbID","htmlFor","value","type","id","placeholder","onChange","event","currentTarget","onKeyDown","preventDefault","onClick","disabled","App","setMovies","find","film","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8c394237.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport { Movie } from '../Interfaces/Interface';\n\ninterface Props {\n  movie: Movie;\n}\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => {\n  const {\n    imdbUrl, imgUrl, title, description,\n  } = movie;\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <img\n            src={imgUrl}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\">{title}</p>\n          </div>\n        </div>\n\n        <div className=\"content\">\n          {description}\n          <br />\n          <a href={imdbUrl}>IMDB</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../Interfaces/Interface';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map((movie) => (\n      <MovieCard key={movie.imdbId} movie={movie} />\n    ))}\n  </div>\n);\n","export const fetchData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(url);\n  const data = response.json();\n\n  return data;\n};\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport { MovieCard } from '../MovieCard';\nimport { fetchData } from '../../Api';\nimport { MovieFromServer, Movie } from '../Interfaces/Interface';\nimport { URL } from '../Interfaces/Constants';\n\ninterface Props {\n  addMovie: (movie: Movie) => void;\n}\n\nexport const FindMovie: React.FC<Props> = ({ addMovie }) => {\n  const [isFetched, setIsFetched] = useState(false);\n  const [preview, setPreview] = useState<Movie>();\n  const [isDisabled, setDisabled] = useState(true);\n  const [isError, setError] = useState(false);\n  const [title, setTitle] = useState('');\n\n  const handleInputChange = (event: React.FormEvent<HTMLInputElement>) => {\n    const { value } = event.currentTarget;\n\n    setError(false);\n    setTitle(value);\n  };\n\n  const loadData = async () => {\n    setIsFetched(true);\n    const dataFromServer = await fetchData<MovieFromServer>(`${URL}${title}`);\n\n    if (dataFromServer.Response === 'False') {\n      setPreview(undefined);\n      setDisabled(true);\n      setError(true);\n    } else {\n      const newMovie = {\n        title: dataFromServer.Title,\n        description: dataFromServer.Plot,\n        imgUrl: dataFromServer.Poster,\n        imdbUrl: `https://www.imdb.com/title/${dataFromServer.imdbID}`,\n        imdbId: dataFromServer.imdbID,\n      };\n\n      setDisabled(false);\n      setPreview(newMovie);\n    }\n\n    setIsFetched(false);\n  };\n\n  const keyDownHandler = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const { key } = event;\n\n    if (key === 'Enter') {\n      event.preventDefault();\n      loadData();\n    }\n  };\n\n  const handleAddingMovie = () => {\n    if (preview) {\n      addMovie(preview);\n      setTitle('');\n      setPreview(undefined);\n      setDisabled(true);\n    }\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              value={title}\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={isError ? 'input error' : 'input correct'}\n              onChange={handleInputChange}\n              onKeyDown={keyDownHandler}\n            />\n            {\n              isError && <p className=\"error-text\">Movie was not found, please try again!</p>\n\n            }\n          </div>\n        </div>\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={loadData}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              disabled={isDisabled}\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={handleAddingMovie}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        <h2 className=\"title\">Preview</h2>\n        {\n          isFetched && <p>Loading.....</p>\n\n        }\n        {\n          preview && <MovieCard movie={preview} />\n        }\n      </div>\n    </>\n  );\n};\n","export const URL = 'https://www.omdbapi.com/?apikey=51c92afd&t=';\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\nimport { Movie } from './components/Interfaces/Interface';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState(data);\n\n  const addMovieToTheList = (movie: Movie) => {\n    const isExists = movies.find(film => film.imdbId === movie.imdbId);\n\n    if (!isExists) {\n      setMovies([...movies, movie]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie\n          addMovie={addMovieToTheList}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}